{"version":3,"sources":["../../src/controllers/book.controller.ts"],"sourcesContent":["import { Prisma } from \"@prisma/client\";\r\nimport { NextFunction, Request, Response } from \"express\";\r\nimport prisma from \"../prisma/prisma.db\";\r\nimport { query } from 'express-validator';\r\n\r\nclass BookController {\r\n\r\n\r\n    public store = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n        try {\r\n            await prisma.book.create({\r\n                data: req.body\r\n            })\r\n            res.status(201).json({ book: req.body, status: 'Book created successfully.' });\r\n\r\n        } catch (error) {\r\n            res.status(400).json({ data: error, status: 'error' });\r\n        }\r\n    };\r\n\r\n    public listBooks = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n        try {\r\n            let books = await prisma.book.findMany();\r\n            res.status(200).json({ data: books, status: 'Books fetched successfully' });\r\n\r\n        } catch (error) {\r\n            res.status(400).json({ data: error, status: 'error' });\r\n        }\r\n    };\r\n\r\n    public find = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n        try {\r\n            let book = await prisma.book.findUnique({\r\n                where: {\r\n                    id: req.params.id\r\n                }\r\n            });\r\n\r\n            res.status(200).json({ data: book, status: 'Book detail fetched successfully' });\r\n        } catch (error) {\r\n            res.status(400).json({ data: error, status: 'error' });\r\n        }\r\n    };\r\n\r\n\r\n    public deleteBook = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n        try {\r\n\r\n            let book = await prisma.book.delete({\r\n                where: {\r\n                    id: req.params.id\r\n                }\r\n            });\r\n\r\n            res.status(201).json({ data: book, status: 'Book deleted successfully' });\r\n        } catch (e) {\r\n            res.status(400).json({ data: e, status: 'error' });\r\n        }\r\n    };\r\n\r\n}\r\n\r\nexport default BookController;"],"names":["BookController","store","req","res","next","prisma","book","create","data","body","status","json","error","listBooks","books","findMany","find","findUnique","where","id","params","deleteBook","delete","e"],"mappings":";;;;+BA8DA;;;eAAA;;;iEA5DmB;;;;;;;;;;;;;;;;;;;AAGnB,IAAA,AAAMA,iBAAN,MAAMA;;QAGF,uBAAOC,SAAQ,OAAOC,KAAcC,KAAeC;YAC/C,IAAI;gBACA,MAAMC,iBAAM,CAACC,IAAI,CAACC,MAAM,CAAC;oBACrBC,MAAMN,IAAIO,IAAI;gBAClB;gBACAN,IAAIO,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEL,MAAMJ,IAAIO,IAAI;oBAAEC,QAAQ;gBAA6B;YAEhF,EAAE,OAAOE,OAAO;gBACZT,IAAIO,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEH,MAAMI;oBAAOF,QAAQ;gBAAQ;YACxD;QACJ;QAEA,uBAAOG,aAAY,OAAOX,KAAcC,KAAeC;YACnD,IAAI;gBACA,IAAIU,QAAQ,MAAMT,iBAAM,CAACC,IAAI,CAACS,QAAQ;gBACtCZ,IAAIO,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEH,MAAMM;oBAAOJ,QAAQ;gBAA6B;YAE7E,EAAE,OAAOE,OAAO;gBACZT,IAAIO,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEH,MAAMI;oBAAOF,QAAQ;gBAAQ;YACxD;QACJ;QAEA,uBAAOM,QAAO,OAAOd,KAAcC,KAAeC;YAC9C,IAAI;gBACA,IAAIE,OAAO,MAAMD,iBAAM,CAACC,IAAI,CAACW,UAAU,CAAC;oBACpCC,OAAO;wBACHC,IAAIjB,IAAIkB,MAAM,CAACD,EAAE;oBACrB;gBACJ;gBAEAhB,IAAIO,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEH,MAAMF;oBAAMI,QAAQ;gBAAmC;YAClF,EAAE,OAAOE,OAAO;gBACZT,IAAIO,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEH,MAAMI;oBAAOF,QAAQ;gBAAQ;YACxD;QACJ;QAGA,uBAAOW,cAAa,OAAOnB,KAAcC,KAAeC;YACpD,IAAI;gBAEA,IAAIE,OAAO,MAAMD,iBAAM,CAACC,IAAI,CAACgB,MAAM,CAAC;oBAChCJ,OAAO;wBACHC,IAAIjB,IAAIkB,MAAM,CAACD,EAAE;oBACrB;gBACJ;gBAEAhB,IAAIO,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEH,MAAMF;oBAAMI,QAAQ;gBAA4B;YAC3E,EAAE,OAAOa,GAAG;gBACRpB,IAAIO,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEH,MAAMe;oBAAGb,QAAQ;gBAAQ;YACpD;QACJ;;AAEJ;MAEA,WAAeV"}